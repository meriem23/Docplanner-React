{"version":3,"sources":["components/DocplannerNavBar.js","components/DocplannerIntro.js","components/DocplannerCards.js","components/DocplannerInfo.js","components/DocplannerCountries.js","components/DocplannerFooter.js","components/DocplannerStatItems.js","components/DocplannerStat.js","App.js","serviceWorker.js","index.js"],"names":["DocplannerNavBar","props","style","listStyleType","className","src","alt","data","map","el","subMenu","href","link","title","DocplannerIntro","text","DocplannerCards","options","imglink","DocplannerInfo","logo","float","DocplannerCountries","flex","flexDirection","imgctrlink","Button","DocplannerFooter","ConName","DocplannerStatItems","index","logoLink","DocplannerStat","NavItems","IntroText","CardsText","DocInfo","DocCount","DocStat","footerInfo","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b2acfc18.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst DocplannerNavBar = props => {\r\n    return (\r\n        <ul style={{ listStyleType: 'none' }} className='docplannerNavbar'>\r\n            <div>\r\n                <img src='https://www.docplanner.com/img/logo-default-group-en.svg?v=1' alt='DocplannerLogo' className='logoNav' />\r\n            </div>\r\n            <div className=\"navItems\">\r\n                {props.data.map(el => (\r\n                el.subMenu ?\r\n                    <div className='hovMenu'>\r\n                        <div className='hovSubMenu'>\r\n                            <a className='linkStyle' href={el.link}>\r\n                                {el.title}\r\n                            </a>\r\n                        </div>\r\n                        <ul style={{ listStyleType: 'none' }} className='hovSubMenuItems'>\r\n                            {el.subMenu.map(el => <li>{el}</li>)}\r\n                        </ul>\r\n                    </div>\r\n                    : <li>\r\n                        <div >\r\n                            <a className='linkStyle' href={el.link}>\r\n                                {el.title}\r\n                            </a>\r\n                        </div>\r\n                    </li>\r\n            ))}\r\n            </div>\r\n            \r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default DocplannerNavBar;","import React from 'react';\r\n\r\nconst DocplannerIntro = props => {\r\n    return (\r\n        <div>\r\n            <div className='titlePres'>\r\n                <img src='https://www.docplanner.com/img/sygnet.png' alt='DocMiniLogo' />\r\n                <h2 >Making the healthcare experience more human</h2>\r\n            </div>\r\n            <div className='introTextList'>\r\n            {props.data.map(el => (\r\n                    <p className='textPres'>{el.text}</p>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default DocplannerIntro;\r\n","import React from 'react';\r\n\r\n\r\nconst DocplannerCards = props => {\r\n    return (\r\n<div className='docCards'>\r\n{props.data.map(el =>\r\n                el.options ?\r\n                    <div className='patCard'>\r\n                        <p className='patTitl'>{el.title}</p>\r\n                        <h5 className='patText'>{el.text}</h5>\r\n                        <br />\r\n                        <div className='patImSel'>\r\n                            <select className='countSelect'>\r\n                                {el.options.map(el => <option>{el}</option>)}\r\n                            </select>\r\n                            <img src={el.imglink} alt='patient image' className='patLogo' />\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    <div className='docCard'>\r\n                        <p className='docTitl'>{el.title}</p>\r\n                        <h5 className='docText'>{el.text}</h5>\r\n                        <img src={el.imglink} alt='doctor image' className='docLogo' />\r\n                    </div>\r\n            )}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default DocplannerCards;\r\n","import React from 'react'\r\n\r\nconst DocplannerInfo = props => {\r\n    return (\r\n        <div className='docInfo'>\r\n            <h5 className='docTitle'>We are a global<br/> company <br/>with local culture</h5>\r\n            {props.data.map(el =>\r\n                <div className='tiltLogo'>\r\n                    <img src={el.logo} alt='logo' className='doctLogo' style={{float:'left'}}/>\r\n                    <h5 className='titl'style={{float:'right'}}>{el.title}</h5>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DocplannerInfo \r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport View from 'react';\r\n\r\nconst DocplannerCountries = props => {\r\n    return (\r\n        <div style={{ flex: 1, flexDirection: 'row' }}>\r\n            <div>\r\n                <h3 className='textOne'>Improve the lives of millions.<br /> Change yours forever</h3>\r\n                <p className='textTwo'>More than 1000 team mates share our same vision, goals and passion.<br /> With offices in Warsaw, Barcelona, Istanbul, Rome, Mexico City and<br /> Curitiba, our search for great talent never stops.</p>\r\n            </div>\r\n            <div className='Cards'>\r\n            {props.data.map(el =>\r\n                <div className='card'>\r\n                    <img src={el.imgctrlink} alt='Country Image' className='ctrImg' />\r\n                    <div className='contList'>\r\n                        <p className='ctrName'>{el.title}</p>\r\n                        <Button className='btn-primary'>See Openings</Button>\r\n                    </div>\r\n                </div>)}\r\n               </div> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DocplannerCountries\r\n","import React from 'react';\r\n\r\n\r\nconst DocplannerFooter = props => {\r\n    return (\r\n        <div>\r\n            <hr />\r\n            <div className='footerList'>\r\n                <p > We are leaders in 10 countries:</p>\r\n                {props.data.map(el =><p className='footerText'>{el.ConName}</p>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DocplannerFooter;","import React from 'react'\r\n\r\n\r\nconst DocplannerStatItems = props => {\r\n    return (\r\n        <div className={props.index % 2 === 0 ? 'statItems statItemsD' : 'statItems' }>\r\n            <img src={props.data.logoLink} alt='logo' className=\"statLogo\" />\r\n            <h5 className='statTitle'>{props.data.title}</h5>\r\n            <p className='statText'>{props.data.text}</p>\r\n                </div>\r\n            )\r\n        }\r\nexport default DocplannerStatItems;","import React from 'react'\r\nimport DocplannerStatItems from './DocplannerStatItems'\r\n\r\n const DocplannerStat = props => {\r\n    return (\r\n        <div className='sidesItems'>\r\n          <div className='sideOne'>\r\n              <div className='sideOneText'>\r\n              <h6 className='sideTitle'>The world's <br /> biggest healthcare platform</h6>\r\n                <p className='sideText'>We work from 6 offices all over the world, bringing Docplanner <br />Group to life in almost 20 countries.</p>\r\n              </div>\r\n                <img src='https://www.docplanner.com/img/logo.png' alt='logo' className='sideLogo' />\r\n            </div>  \r\n            <div  className='sideTwo'>\r\n                {props.data.map((el , index)=> <DocplannerStatItems data={el} index={index}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default DocplannerStat;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './components/DocplannerNavbar.css';\nimport './components/DocplannerIntro.css';\nimport './components/DocplannerCards.css';\nimport './components/DocplannerInfo.css';\nimport './components/DocplannerCountries.css';\nimport './components/DocplannerFooter.css';\nimport './components/DocplannerStat.css'\nimport DocplannerNavBar from './components/DocplannerNavBar';\nimport DocplannerIntro from './components/DocplannerIntro';\nimport DocplannerCards from './components/DocplannerCards';\nimport DocplannerInfo from './components/DocplannerInfo';\nimport DocplannerCountries from './components/DocplannerCountries';\nimport DocplannerFooter from './components/DocplannerFooter';\nimport DocplannerStat from './components/DocplannerStat';\n\n\nconst NavItems = [{ title: 'About us', link: '' },\n{ title: 'Career', link: '' },\n{\n  title: 'Departments', link: '',\n  subMenu: ['Marketing & PR', 'Custumer sucess & Sales', 'IT, Product, Design & UX Data', 'Finance & Administration', 'HR & more']\n}]\n\nconst IntroText = [{\n  text: \"We want patients to find the perfect doctor and book an appointment in the most easy way. The patient journey should be enjoyable, and that's why we are always next to them: to help them find the best possible care.Anytime, anywhere.\"\n}, { text: \"We also help doctors to better manage their practice and build their online reputation. With our integrated end-to-end solution, doctors are able not only to improve their online presence, but also to devote their time to what really matters: their patients.\" }]\n\nconst CardsText = [{ title: 'For patients', text: 'Find a doctor, book a visit and \\n solve any health-related doubt', imglink: 'https://www.docplanner.com/img/screen-marketplace@2x.png', options: ['CHOOSE COUNTRY', 'Argentina', 'Australia', 'Brazil', 'Chilie', 'Colombia', 'Czech', 'France', 'Italy', 'Mexico', 'Peru', 'Poland', 'Portugal', 'Spain', 'Turkey', 'UK'] }, { title: 'For doctors', text: 'Save time managing visits and cut no-shows by half', imglink: 'https://www.docplanner.com/img/screen-saas@2x.png' }]\n\nconst DocInfo = [{ logo: 'https://www.docplanner.com/img/sygnet.png', title: 'ZnanyLekarz' }, { logo: 'https://www.docplanner.com/img/sygnet.png', title: 'Doctoralia' }, { logo: 'https://www.docplanner.com/img/sygnet.png', title: 'MioDottore' }, { logo: 'https://www.docplanner.com/img/sygnet.png', title: 'DoktorTakvimi' }, { logo: 'https://www.docplanner.com/img/sygnet.png', title: 'ZnamyLekar' }]\n\nconst DocCount = [{ imgctrlink: 'https://www.docplanner.com/images/warsaw.png', title: 'Warsaw' }, { imgctrlink: 'https://www.docplanner.com/images/barcelona.png', title: 'Barcelona' }, { imgctrlink: 'https://www.docplanner.com/images/istanbul.png', title: 'Istanbul' }, { imgctrlink: 'https://www.docplanner.com/images/rome.png', title: 'Rome' }, { imgctrlink: 'https://www.docplanner.com/images/mexico-city.png', title: 'Mexico City' }, { imgctrlink: 'https://www.docplanner.com/images/curitiba.png', title: 'Curitiba' }]\n\nconst DocStat = [{\n  logoLink: 'https://www.docplanner.com/img/flag.png', title: 'Leader in 10 countries',\n  text: 'Poland, Turkey, Spain, Italy, Czech Republic, Mexico, Brazil, Colombia, Argentina and Chile'\n},{ logoLink: 'https://www.docplanner.com/img/visits.png', title: '1.5 million appointments', text: 'booked last month' },{ logoLink: 'https://www.docplanner.com/img/patients.png', title: '30 million unique patients', text: 'visit us every month' },\n{ logoLink: 'https://www.docplanner.com/img/doctors.png', title: '2 million active doctors', text: 'trust in our solutions' }]\nconst footerInfo = [{ ConName: 'Poland, '}, { ConName: 'Turkey, ' }, { ConName: 'Spain, ' }, { ConName: 'Italy, ' }, { ConName: 'Czech Republic, ' }, { ConName: 'Mexico, '}, { ConName: 'Colombia, '}, { ConName: 'Brazil, ' }, { ConName: 'Argentina, '}, { ConName: 'and Chilie. '}]\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DocplannerNavBar data={NavItems} />\n      <div className='container'>\n      <DocplannerIntro data={IntroText} />\n      <DocplannerCards data={CardsText} />\n      <DocplannerInfo data={DocInfo} />\n    </div>\n    <DocplannerStat data={DocStat} />\n    <div className='container'>\n      <DocplannerCountries data={DocCount} />\n    </div>\n    <DocplannerFooter data={footerInfo} />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}